package com.ruoyi.web.controller.termite;

import java.util.*;
import java.util.stream.Collectors;
import javax.servlet.http.HttpServletResponse;

import com.ruoyi.common.core.domain.entity.SysDept;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.system.domain.*;
import com.ruoyi.system.mapper.BPatrolMapper;
import com.ruoyi.system.service.*;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.common.core.page.TableDataInfo;

/**
 * 巡查Controller
 *
 * @author ruoyi
 * @date 2024-03-05
 */
@RestController
@RequestMapping("/system/patrol")
public class BPatrolController extends BaseController {
    @Autowired
    private IBPatrolService bPatrolService;

    @Autowired
    private IBAuditService ibAuditService;
    @Autowired
    private IBProjectService projectService;
    @Autowired
    private IBPatrolFileService fileService;

    @Autowired
    ISysDeptService deptService;

    @Autowired
    BPatrolMapper bPatrolMapper;

    /**
     * 查询巡查列表
     */
    @GetMapping("/list")
    public TableDataInfo list(BPatrol bPatrol) {
        startPage();
      //  List<BPatrol> list = bPatrolService.selectBPatrolList2(bPatrol);
        startPage();
        List<Map<String, Objects>> maps = bPatrolMapper.selectBPatrolList2(bPatrol);
        return getDataTable(maps);
    }




    /**
     * 导出巡查列表
     */
    @PreAuthorize("@ss.hasPermi('system:patrol:export')")
    @Log(title = "巡查", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, BPatrol bPatrol) {
        List<BPatrol> list = bPatrolService.selectBPatrolList(bPatrol);
        ExcelUtil<BPatrol> util = new ExcelUtil<BPatrol>(BPatrol.class);
        util.exportExcel(response, list, "巡查数据");
    }

    /**
     * 获取巡查详细信息
     */

    @GetMapping(value = "/{id}")
    public AjaxResult getInfo(@PathVariable("id") Long id) {
        BPatrol bPatrol =bPatrolService.selectBPatrolById(id);
        return success(bPatrol);
    }

    /**
     * 新增巡查
     */
    @PostMapping
    public AjaxResult add(@RequestBody BPatrol bPatrol) {
        bPatrol.setAuditStatus("1");
        //提交数据的时候需要生成审核信息，根据当前提交人所在的部门生成。
        bPatrol.setFreedom2(DateUtils.getTime());
      int rss =  bPatrolService.insertBPatrol(bPatrol);
        try {
            Long projectid = bPatrol.getProjectId();
            BProject projectinfo = projectService.selectBProjectById(projectid);
            SysDept dept = deptService.selectDeptById(projectinfo.getDeptId());
            BAudit audit = new BAudit();
            audit.setPatrolId(bPatrol.getId());
            audit.setCurrentDept(dept.getDeptId());
            audit.setSubordinateDept(dept.getParentId());
            audit.setDataState(1l);
            ibAuditService.insertBAudit(audit);
        } catch (Exception e) {
            System.out.println("生成审核信息出现错误。");
        }

        try {
            if (!"".equals(bPatrol.getFreedom1())) {

                String[] filelist = bPatrol.getFreedom1().split(",");
                for (String s : filelist) {
                    BPatrolFile file = new BPatrolFile();
                    file.setPatorlId(bPatrol.getId());
                    file.setFilePath(s);
                    file.setDelFlag("0");
                    fileService.insertBPatrolFile(file);
                }
            }
        } catch (Exception e) {
            System.out.printf("保存图片失败。");
        }

        return toAjax(rss);
    }

    /**
     * 修改巡查
     */
    @PutMapping
    public AjaxResult edit(@RequestBody BPatrol bPatrol) {
            //修改驳回的数据，需要重新发起审核请求
            if(bPatrol.getAuditStatus().equals("4")){
                bPatrol.setAuditStatus("1");
                try {
                    Long projectid = bPatrol.getProjectId();
                    BProject projectinfo = projectService.selectBProjectById(projectid);
                    SysDept dept = deptService.selectDeptById(projectinfo.getDeptId());
                    BAudit audit = new BAudit();
                    audit.setPatrolId(bPatrol.getId());
                    audit.setCurrentDept(dept.getDeptId());
                    audit.setSubordinateDept(dept.getParentId());
                    audit.setDataState(1l);
                    ibAuditService.insertBAudit(audit);
                } catch (Exception e) {
                    System.out.println("生成审核信息出现错误。");
                }

            }

        return toAjax(bPatrolService.updateBPatrol(bPatrol));
    }

    /**
     * 删除巡查
     */
    @PreAuthorize("@ss.hasPermi('system:patrol:remove')")
    @Log(title = "巡查", businessType = BusinessType.DELETE)
    @DeleteMapping("/{ids}")
    public AjaxResult remove(@PathVariable Long[] ids) {
        return toAjax(bPatrolService.deleteBPatrolByIds(ids));
    }

    /**
     * 查询
     */
    @GetMapping("/listall/{id}")
    public AjaxResult listall(@PathVariable int id) {
        BPatrolUnitPlaceAll bPatrolUnitPlaceAll=new BPatrolUnitPlaceAll();

      BPatrolUnitPlace bPatrolUnitPlace   =bPatrolMapper.listall(id);
        List<BPatrol> bPatrolList=new ArrayList<>();
        String patrolId = bPatrolUnitPlace.getPatrolId();
        String[] patrolIdArray = patrolId.split(",");
        for (String s : patrolIdArray) {
            String replace = s.replace(",", "");
            long i =  Long.parseLong((replace.toString()));
            BPatrol bPatrol = bPatrolMapper.selectBPatrolById(i);
            String freedom3 = bPatrol.getFreedom3();
            String typeName=bPatrolMapper.selectfreedom3(freedom3);
            bPatrol.setTypeName(typeName);


            bPatrolList.add(bPatrol);
        }
        bPatrolUnitPlaceAll.setAddress(bPatrolUnitPlace.getAdress());
        bPatrolUnitPlaceAll.setPatrolUnit(String.valueOf(bPatrolUnitPlace.getPatrolUnit()));
        bPatrolUnitPlaceAll.setPatrolType(bPatrolUnitPlace.getDetrimentType());
        bPatrolUnitPlaceAll.setProjectId(bPatrolUnitPlace.getProjectId());
        bPatrolUnitPlaceAll.setInspectorId(Long.valueOf(bPatrolUnitPlace.getInspector()));
        bPatrolUnitPlaceAll.setLat(Integer.parseInt(bPatrolUnitPlace.getLat()));
        bPatrolUnitPlaceAll.setLon(Integer.parseInt(bPatrolUnitPlace.getLon()));

        bPatrolUnitPlaceAll.setPatrols(bPatrolList);


        return AjaxResult.success(bPatrolUnitPlaceAll);
    }



}
