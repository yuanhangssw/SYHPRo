package com.ruoyi.web.controller.termite;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.http.HttpServletResponse;

import com.ruoyi.common.core.domain.entity.SysDept;
import com.ruoyi.common.utils.SecurityUtils;
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.system.domain.BPatrolUnit;
import com.ruoyi.system.service.IBPatrolUnitService;
import com.ruoyi.system.service.ISysDeptService;
import com.ruoyi.web.controller.termite.utils.MileageUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.enums.BusinessType;
import com.ruoyi.system.domain.BProject;
import com.ruoyi.system.service.IBProjectService;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.common.core.page.TableDataInfo;

/**
 * 项目信息Controller
 *
 * @author ruoyi
 * @date 2024-03-05
 */
@RestController
@RequestMapping("/system/project")
public class BProjectController extends BaseController {
    @Autowired
    private IBProjectService bProjectService;
    @Autowired
    private IBPatrolUnitService bPatrolUnitService;
    @Autowired
    private ISysDeptService deptService;

    /**
     * 查询项目信息列表
     */
    @PreAuthorize("@ss.hasPermi('system:project:list')")
    @GetMapping("/list")
    public TableDataInfo list(BProject bProject) {
        startPage();
        List<BProject> list = bProjectService.selectBProjectList(bProject);
        return getDataTable(list);
    }

    /**
     * 导出项目信息列表
     */
    @PreAuthorize("@ss.hasPermi('system:project:export')")
    @Log(title = "项目信息", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, BProject bProject) {
        List<BProject> list = bProjectService.selectBProjectList(bProject);
        ExcelUtil<BProject> util = new ExcelUtil<BProject>(BProject.class);
        util.exportExcel(response, list, "项目信息数据");
    }

    /**
     * 获取项目信息详细信息
     */
    @PreAuthorize("@ss.hasPermi('system:project:query')")
    @GetMapping(value = "/{id}")
    public AjaxResult getInfo(@PathVariable("id") Long id) {
        return success(bProjectService.selectBProjectById(id));
    }

    /**
     * 新增项目信息
     */
    @PreAuthorize("@ss.hasPermi('system:project:add')")
    @Log(title = "项目信息", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody BProject bProject) {
        int res = bProjectService.insertBProject(bProject);
        //项目类型为堤防  普查起始桩号、终止桩号不为空生成巡查单元
        if (bProject.getProjectType() == 2) {
            if (StringUtils.isNotEmpty(bProject.getDykePatrolPileEnd()) && StringUtils.isNotEmpty(bProject.getDykePatrolPile())) {
                List<String> list = MileageUtils.mtolist1(bProject.getDykePatrolPile(), bProject.getDykePatrolPileEnd());
                if (list.size() > 0) {
                    for (String patorl : list) {
                        BPatrolUnit bPatrolUnit = new BPatrolUnit();
                        bPatrolUnit.setDelFlag("0");
                        bPatrolUnit.setProjectId(bProject.getId());
                        bPatrolUnit.setUnitName(patorl);
                        bPatrolUnit.setCreateBy(SecurityUtils.getUsername());
                        bPatrolUnit.setCreateTime(new Date());
                        bPatrolUnitService.insertBPatrolUnit(bPatrolUnit);
                    }
                }
            }
        }
        return toAjax(res);
    }

    /**
     * 修改项目信息
     */
    @PreAuthorize("@ss.hasPermi('system:project:edit')")
    @Log(title = "项目信息", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody BProject bProject) {
        BProject bProjectold = new BProject();
        bProjectold.setId(bProject.getId());
        List<BProject> oldProject = bProjectService.selectBProjectList(bProjectold);
        if (oldProject.size() > 0) {
            if (oldProject.get(0).getDykePatrolPileEnd().equals(bProject.getDykePatrolPileEnd()) && oldProject.get(0).getDykePatrolPile().equals(bProject.getDykePatrolPile())) {

            } else {
                bPatrolUnitService.deleteBPatrolUnitByProject(bProject.getId());
                List<String> list = MileageUtils.mtolist1(bProject.getDykePatrolPile(), bProject.getDykePatrolPileEnd());
                if (list.size() > 0) {
                    for (String patorl : list) {
                        BPatrolUnit bPatrolUnit = new BPatrolUnit();
                        bPatrolUnit.setDelFlag("0");
                        bPatrolUnit.setProjectId(bProject.getId());
                        bPatrolUnit.setUnitName(patorl);
                        bPatrolUnit.setCreateBy(SecurityUtils.getUsername());
                        bPatrolUnit.setCreateTime(new Date());
                        bPatrolUnitService.insertBPatrolUnit(bPatrolUnit);
                    }
                }
            }
        }
        return toAjax(bProjectService.updateBProject(bProject));
    }

    /**
     * 删除项目信息
     */
    @PreAuthorize("@ss.hasPermi('system:project:remove')")
    @Log(title = "项目信息", businessType = BusinessType.DELETE)
    @DeleteMapping("/{ids}")
    public AjaxResult remove(@PathVariable Long[] ids) {
        return toAjax(bProjectService.deleteBProjectByIds(ids));
    }

    /**
     * 获取当前部门下的项目
     *
     * @return
     */
    @GetMapping("/listbyDeptId")
    public TableDataInfo listbyDeptId() {
        SysDept sysDept = new SysDept();
        List<SysDept> listd = deptService.selectDeptList(sysDept);
        List<Long> SysDeptList = listd.stream().map(SysDept::getDeptId).collect(Collectors.toList());
        List<BProject> list = bProjectService.getBProjectByDept(SysDeptList);
        return getDataTable(list);
    }
}
